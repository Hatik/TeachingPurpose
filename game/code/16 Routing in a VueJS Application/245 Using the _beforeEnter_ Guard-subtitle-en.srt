1
00:00:01,620 --> 00:00:06,680
So already set up my template here to have to confirm button it didn't add any logic though.

2
00:00:06,720 --> 00:00:12,620
But I want to start with the is to use or allowed to wizard a certain route task first.

3
00:00:12,690 --> 00:00:17,600
Now we have three different places where we can set up is a user are allowed to enter a route check

4
00:00:17,640 --> 00:00:21,210
and one place where you may set up the is he allowed to leave check.

5
00:00:21,210 --> 00:00:26,310
Now I want to start with is he allowed to enter a check and the first place to set this up is here in

6
00:00:26,320 --> 00:00:30,130
the main or chairs fall here where he set up the router.

7
00:00:30,390 --> 00:00:36,570
We can use our outdoor which you configured here before we assign a tour instance to access it and set

8
00:00:36,570 --> 00:00:39,320
up the before each method here.

9
00:00:39,570 --> 00:00:46,290
Now before each means execute this before each routing action before every routing action which may

10
00:00:46,290 --> 00:00:52,800
occur here does expect to get a function as an argument where we have to route one to navigate to the

11
00:00:52,800 --> 00:00:58,500
route where we are coming from and next which is a call that we can execute to let the request continue

12
00:00:58,500 --> 00:00:59,870
its journey.

13
00:00:59,880 --> 00:01:05,640
So basically this before each function does argument we're passing here gets executed on each routing

14
00:01:05,640 --> 00:01:06,290
action.

15
00:01:06,450 --> 00:01:13,770
So you may use this for only very generic checks and you should be aware that it gets executed all the

16
00:01:13,770 --> 00:01:14,530
time.

17
00:01:14,820 --> 00:01:24,010
So I can simply lock lobal before it each so that we can see that here or as we reached this point important

18
00:01:24,150 --> 00:01:28,520
you have to execute next to allow the routing action to continue.

19
00:01:28,560 --> 00:01:34,110
If you don't do that it's assumed that it's not allowed to continue and it will exit and will not go

20
00:01:34,110 --> 00:01:36,920
to your route or to the page you wanted to go to.

21
00:01:37,230 --> 00:01:43,920
Alternatively you could pass next falls to abort the current operation and stay on the page you were

22
00:01:43,920 --> 00:01:53,310
at or you can also pass either a payoff or the same object you already know from rattlings and from

23
00:01:53,310 --> 00:01:55,630
daz route or push Mefford.

24
00:01:55,680 --> 00:01:59,910
So an object where you find the path you want to navigate to.

25
00:02:00,090 --> 00:02:03,120
So you can also issue a redirection here with that.

26
00:02:03,120 --> 00:02:05,670
So these are the free options pass nothing.

27
00:02:05,700 --> 00:02:08,610
It continues its journey and will finally load.

28
00:02:08,610 --> 00:02:16,380
Did you start page at some point of time pass fog's it will abort pass either a pop or an object defining

29
00:02:16,380 --> 00:02:19,380
that party including parents and so on to redirect.

30
00:02:19,380 --> 00:02:20,580
These are the free options.

31
00:02:20,610 --> 00:02:24,070
So here I will just let the request continue its journey.

32
00:02:24,300 --> 00:02:31,660
But what we can already see if I open the console and I float this we seek global before each was executed

33
00:02:31,670 --> 00:02:32,170
there.

34
00:02:32,160 --> 00:02:34,950
If I click go to home we see here it was executed.

35
00:02:34,950 --> 00:02:37,200
If I click user here it was executed.

36
00:02:37,230 --> 00:02:40,530
If I click on a single user it was executed and so on.

37
00:02:40,530 --> 00:02:46,860
So this really gets executed on each routeing action global before each set up here directly on the

38
00:02:46,860 --> 00:02:51,080
global router which we passed to route the instance.

39
00:02:51,500 --> 00:02:56,750
Now this is something you might use all the time sometimes you only want to protect certain routes.

40
00:02:56,760 --> 00:02:59,120
That is the more common use case I'd say.

41
00:02:59,370 --> 00:03:08,610
So let's say we want to protect our user detail Routier this one then we can also at the before enter

42
00:03:08,730 --> 00:03:14,640
property here which Nalls is a function which you could also store in file and simply import but I'll

43
00:03:14,640 --> 00:03:16,000
write it here.

44
00:03:16,020 --> 00:03:22,460
And this has the same arguments as the other function had this global function to from and next.

45
00:03:22,590 --> 00:03:24,860
And then it works exactly the same way.

46
00:03:24,930 --> 00:03:27,610
Here is say inside route.

47
00:03:27,630 --> 00:03:31,120
Set up to see where this was executed.

48
00:03:31,260 --> 00:03:37,440
And then again we can call next like this to let it continue with falls to a board or with a different

49
00:03:37,440 --> 00:03:41,580
POV to navigate to that pop just like on the global function.

50
00:03:41,580 --> 00:03:45,190
But now directly limited to this route.

51
00:03:45,190 --> 00:03:51,810
And we can see this if I clear my console load here we see global before each and inside routes it up

52
00:03:51,820 --> 00:03:53,990
because I am on the user Dettol route.

53
00:03:54,210 --> 00:03:57,850
But if I click on go to home we only see global for ege.

54
00:03:58,080 --> 00:03:59,820
The same is true for the user page.

55
00:03:59,850 --> 00:04:04,580
Only if I select the individual user and hence go to the user detail bayed page.

56
00:04:04,740 --> 00:04:06,980
Do I see inside routes set up.

57
00:04:07,020 --> 00:04:10,360
So this is the next step of granularity here.

58
00:04:10,380 --> 00:04:12,660
We check it on the router level.

59
00:04:12,720 --> 00:04:18,630
Now the last place where you can implement that is directly in the component you're navigating to so

60
00:04:18,630 --> 00:04:25,650
user detail in this case you would for this go to your route instance and there you get.

61
00:04:25,670 --> 00:04:27,240
Or is your opponent I should say.

62
00:04:27,270 --> 00:04:29,970
And there you get two new methods available.

63
00:04:29,970 --> 00:04:32,070
One is for the Auburn navigation Guard.

64
00:04:32,070 --> 00:04:33,470
We're going to have a look at next.

65
00:04:33,510 --> 00:04:39,840
And the other one is for this we used before in two different places before route enter would be the

66
00:04:39,840 --> 00:04:42,670
name of the method you want to execute here.

67
00:04:42,690 --> 00:04:46,690
This is like a lifecycle Hook and now implemented by the view router.

68
00:04:46,830 --> 00:04:48,640
And here again with two from.

69
00:04:48,720 --> 00:04:49,840
And next.

70
00:04:50,220 --> 00:04:55,650
And if we call Next we finally load this component and if we don't call it we can still abort because

71
00:04:55,650 --> 00:04:56,540
they'll never get away.

72
00:04:56,550 --> 00:04:58,070
That component doesn't get loaded.

73
00:04:58,110 --> 00:05:04,910
And this is key to understand and I want to really highlight this as long as you don't call next year.

74
00:05:05,200 --> 00:05:07,570
This component is not loaded.

75
00:05:07,570 --> 00:05:12,880
This also means that in this lifecycle hook you can't access your view instance you can't access your

76
00:05:12,880 --> 00:05:13,490
data.

77
00:05:13,600 --> 00:05:17,700
So this link to access day is proper here.

78
00:05:17,810 --> 00:05:24,350
Well not to work because this component hasn't been created yet does this kind of a special case here

79
00:05:24,410 --> 00:05:31,110
we're in this file but this object hasn't been fully initialized so we may not access it here.

80
00:05:31,250 --> 00:05:38,630
And that's key to keep in mind if you absolutely need to access it you can pass a callback to the next

81
00:05:38,630 --> 00:05:39,340
function here.

82
00:05:39,350 --> 00:05:46,310
This is a special case where you pass your review model so this component instance to a function and

83
00:05:46,310 --> 00:05:49,060
in there you may know access lingo like this.

84
00:05:49,190 --> 00:05:56,000
So this is now a place where you do have access to your component because since it's inside the next

85
00:05:56,000 --> 00:05:58,340
function it's simply a callback.

86
00:05:58,340 --> 00:05:59,660
We pass it as an argument here.

87
00:05:59,660 --> 00:06:03,400
Keep that in mind which is executed once this component has been loaded.

88
00:06:03,500 --> 00:06:08,010
But this also means that at this point of time the component has been created.

89
00:06:08,150 --> 00:06:14,000
So if you really want to check if this should be created before creating it well then you have to do

90
00:06:14,000 --> 00:06:16,020
it outside of the next callback.

91
00:06:16,100 --> 00:06:20,480
And there you don't have access to the component data which I think makes sense because it isn't there

92
00:06:20,570 --> 00:06:21,440
yet.

93
00:06:21,440 --> 00:06:25,340
So in theory could simply check if the user is authenticated.

94
00:06:25,340 --> 00:06:32,380
So for example X or some other files some global service where you store this or whatever you like.

95
00:06:32,450 --> 00:06:34,340
Check if the user is authenticated.

96
00:06:34,340 --> 00:06:39,900
So your if true to always allow navigation and if that is the case I execute next.

97
00:06:40,100 --> 00:06:46,400
And if this is not the case well then we may simply call next fault to abort now which will not get

98
00:06:46,400 --> 00:06:48,380
executed here because it's always true.

99
00:06:48,380 --> 00:06:54,620
But you could check whatever you wanted to check you're actually showed Chodas if it's false and I'll

100
00:06:54,640 --> 00:06:57,950
reload this page you see it doesn't get loaded.

101
00:06:58,100 --> 00:06:59,460
I'm getting stuck.

102
00:06:59,630 --> 00:07:06,950
So if I'm on my user page and click on user one I'm not getting there because I failed to pass this

103
00:07:06,950 --> 00:07:09,170
test here which is always false.

104
00:07:09,170 --> 00:07:17,390
So let me switch to true and if we now reload this page now it works again because now we are allowed

105
00:07:17,390 --> 00:07:18,400
to continue.

106
00:07:18,590 --> 00:07:22,500
So this is how we can check if a user is allowed to visit a certain page.

107
00:07:22,520 --> 00:07:27,710
We can check it in three different places depending on which access we need and how granular should

108
00:07:27,710 --> 00:07:28,580
be.

109
00:07:28,580 --> 00:07:34,280
Important to know or to keep in mind in all three places you don't have access to the component you're

110
00:07:34,280 --> 00:07:35,390
passing it to.

111
00:07:35,510 --> 00:07:38,630
You only have access to the you are coming from to.

112
00:07:38,750 --> 00:07:44,150
And the route you are going to and then you have is called a function which you need to execute to either

113
00:07:44,150 --> 00:07:48,710
abort or redirect or let the request continue its journey.

