1
00:00:02,300 --> 00:00:07,250
In a class with you we were creating our first component and I was highlighting the importance that

2
00:00:07,250 --> 00:00:13,070
data shall be a function to really understand what can go wrong if it were in one.

3
00:00:13,070 --> 00:00:19,330
We have to cheat because I can't use an object because Mujeres will actually hold and give me a warning

4
00:00:19,700 --> 00:00:28,580
but I can create a new data object outside of chess where I set status to critical and now I can return

5
00:00:28,580 --> 00:00:31,010
the data here which has been an object.

6
00:00:31,010 --> 00:00:31,470
Right.

7
00:00:31,610 --> 00:00:37,580
But now we're cheating because now returning the same data object and I mean the same not content wise

8
00:00:37,610 --> 00:00:42,260
but actually the same place and memory in all instances of this component.

9
00:00:42,260 --> 00:00:48,770
So we create the component twice as we do here I actually do have two instances with the same data object.

10
00:00:48,800 --> 00:00:54,560
The thing Mujeres tries to avoid by forcing us to use a function but it's not able to detect or cheat

11
00:00:54,560 --> 00:00:55,170
here.

12
00:00:55,400 --> 00:00:58,730
So with that if I hit Enter we see critical.

13
00:00:58,730 --> 00:01:03,790
Now we will see the problem once I add something in my template here.

14
00:01:03,950 --> 00:01:14,340
Let's say I add parentheses where I'd then in the parentheses simply add a button loops like this on

15
00:01:14,340 --> 00:01:18,490
this button here and it's a bit hard to read because it's a string.

16
00:01:18,510 --> 00:01:26,240
I say change and I want to execute with at click a method named.

17
00:01:26,280 --> 00:01:29,240
Change status like this.

18
00:01:29,250 --> 00:01:31,110
Now of course I have to register that.

19
00:01:31,110 --> 00:01:36,780
So I will set up my methods object here and here it's fine to use an object because each method will

20
00:01:36,780 --> 00:01:40,900
be running only in this component context here.

21
00:01:40,920 --> 00:01:48,820
So here I will have my change status method which is a function where I now say this status and that

22
00:01:48,820 --> 00:01:53,620
is cool we can still access this with the Diski keyword even though it's enclosed in a function you

23
00:01:53,630 --> 00:01:58,740
chaps will handle this for us in the background equal to normal.

24
00:01:58,740 --> 00:02:05,100
Now if I hit Control enter here and I click change you'll see a change in both instances and not just

25
00:02:05,100 --> 00:02:09,920
in the one where I click that this is the issue with having a shared data object.

26
00:02:09,920 --> 00:02:15,330
Again it's not an issue for the methods object here because that works differently behind the scenes

27
00:02:15,540 --> 00:02:21,840
because there we do we have our change status or we do have our functions which access to current instance

28
00:02:21,840 --> 00:02:23,120
with the this keyword.

29
00:02:23,160 --> 00:02:29,160
So there we don't have a shared instance but the data Well that is the data and therefore this is one

30
00:02:29,160 --> 00:02:30,670
place and memory.

31
00:02:30,780 --> 00:02:37,280
We have different pointers pointing to the same place and therefore we change the same data here.

32
00:02:37,710 --> 00:02:41,010
Now if I comment this out and remove my cheat.

33
00:02:41,040 --> 00:02:44,180
So instead here I again return an object.

34
00:02:44,220 --> 00:02:47,890
So a new object not a shared one with different places and memory.

35
00:02:47,920 --> 00:02:51,630
Therefore I set my status to critical here.

36
00:02:51,830 --> 00:02:57,780
Well now you will see that if I hit Control enter and I click change it only changes in the instance

37
00:02:57,780 --> 00:03:02,010
where I clicked on change again because now we have two different objects.

38
00:03:02,040 --> 00:03:08,400
And I mean different places in memory two different objects in memory and we access them here with this.

39
00:03:08,400 --> 00:03:13,620
And this refers to the different objects which is why we don't have a problem with having methods as

40
00:03:14,050 --> 00:03:15,090
objects here.

41
00:03:15,090 --> 00:03:21,350
This will only refer to the instance or to the object of this view component.

42
00:03:21,360 --> 00:03:28,380
This is key to understand this difference in objects that each component is its own object.

43
00:03:28,380 --> 00:03:32,960
But if we were to share the same data source we would run into problems.

44
00:03:32,950 --> 00:03:33,530
Why.

45
00:03:33,570 --> 00:03:38,860
Which is why data needs to be a function and that's the only thing we need to watch out here for.

46
00:03:38,880 --> 00:03:42,420
With that we saw how to create a simple component.

47
00:03:42,600 --> 00:03:48,900
Now next I want to dive deeper into how we can use these components because right now it's registered

48
00:03:48,900 --> 00:03:56,190
globally which means if I were to have a second view instance here and I use my component there it would

49
00:03:56,190 --> 00:03:58,580
use the same components set up here.

50
00:03:58,740 --> 00:04:01,420
We'll have a look at how we can change this in the next video.

