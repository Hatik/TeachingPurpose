1
00:00:02,590 --> 00:00:04,890
The Last Lecture we installed X-ists.

2
00:00:05,050 --> 00:00:09,190
Let me now import years from x.

3
00:00:09,190 --> 00:00:12,390
That's a package name in the sign up or view file.

4
00:00:12,400 --> 00:00:16,930
So this import statement is all we need for now with this import statement.

5
00:00:16,930 --> 00:00:18,740
I can now use x Yes.

6
00:00:18,810 --> 00:00:24,430
And that's the default export of the Xs package and make HTB requests for it.

7
00:00:24,490 --> 00:00:28,220
Now the goal is to make it should be request.

8
00:00:28,240 --> 00:00:31,110
Q Are firebase backend so there.

9
00:00:31,140 --> 00:00:38,660
I want to essentially target this or else we can see here go back to our application to make such a

10
00:00:38,680 --> 00:00:39,690
request.

11
00:00:39,700 --> 00:00:44,830
I want to do this in your own separate method which is fired when we submit the form where I right now

12
00:00:44,830 --> 00:00:47,680
only output the data to make such a request.

13
00:00:47,680 --> 00:00:49,610
I'll now reach out to access there.

14
00:00:49,810 --> 00:00:57,490
And there we get a couple of methods for the different HTP requests get for a get request and post for

15
00:00:57,490 --> 00:01:00,120
a post request and port for a port request.

16
00:01:00,130 --> 00:01:01,410
And so on.

17
00:01:01,420 --> 00:01:08,430
Now once you store data on firebase and for that we can use the port or the post request post.

18
00:01:08,440 --> 00:01:14,560
If we plan on essentially creating an array of data on the back end point if we just want to write one

19
00:01:14,560 --> 00:01:15,330
object.

20
00:01:15,430 --> 00:01:19,330
Now I want to create an array of users at least theoretically.

21
00:01:19,330 --> 00:01:21,280
So I will call post.

22
00:01:21,430 --> 00:01:26,560
Now the post method for on X is now requires at least two arguments.

23
00:01:26,560 --> 00:01:28,760
The U R L as a string.

24
00:01:29,500 --> 00:01:37,000
And you're able not just target our firebase database like this but I want to target to be created and

25
00:01:37,090 --> 00:01:44,980
therefore automatically created users Snoad and for firebase specifically we need to append Daut Jason

26
00:01:44,980 --> 00:01:45,650
at the end.

27
00:01:45,660 --> 00:01:49,590
Now it is only required to target a valid endpoint on firebase.

28
00:01:49,660 --> 00:01:53,170
It's not something you have to do because of access or something like that.

29
00:01:53,200 --> 00:01:57,260
We did this in early Electress to so that you were out.

30
00:01:57,260 --> 00:02:02,870
The first argument the second argument access post requires is the data.

31
00:02:02,930 --> 00:02:07,770
Well actually it does require us but a post request typically send some data.

32
00:02:07,790 --> 00:02:14,090
So here I just want to send for data which is this javascript object and Access will automatically string

33
00:02:14,090 --> 00:02:19,330
you fighters and therefore ascend a valid data piece to the back end.

34
00:02:19,820 --> 00:02:25,790
You could pass a Furt argument a javascript object where you can pass additional configuration for the

35
00:02:25,790 --> 00:02:26,820
request.

36
00:02:26,840 --> 00:02:32,960
You can learn more about a whaleboat conflict options in the Access documentation I showed you and I

37
00:02:32,960 --> 00:02:38,180
will also dive into some things you can configure on X-ists in general and which you don't always can

38
00:02:38,180 --> 00:02:40,710
also configure on a per request level.

39
00:02:40,820 --> 00:02:42,830
Later this module.

40
00:02:42,830 --> 00:02:45,230
So that's deep post request.

41
00:02:45,230 --> 00:02:46,250
X yes.

42
00:02:46,310 --> 00:02:54,330
Then returns a promise on the post method so we can change then to do something once the promise resolves.

43
00:02:54,500 --> 00:03:00,860
Because of course sending such a post request is a asynchronous task and therefore we can't react to

44
00:03:00,860 --> 00:03:01,540
the result.

45
00:03:01,580 --> 00:03:03,460
At some point in the future.

46
00:03:03,530 --> 00:03:05,920
And that's exactly why we use a promise here.

47
00:03:05,990 --> 00:03:12,580
So Indes then block we can now create a function which executes the code once the request is done.

48
00:03:12,800 --> 00:03:16,460
And here I will simply use it as 6 arrow function.

49
00:03:16,490 --> 00:03:19,060
You could use a normal function with the function keyword.

50
00:03:19,070 --> 00:03:24,950
Again I'll use the arrow function so we will at some time of the future get back a response and then

51
00:03:24,950 --> 00:03:26,500
I simply want to lock it.

52
00:03:26,570 --> 00:03:29,490
So I got a very short Erol function here.

53
00:03:29,540 --> 00:03:35,610
You can also change a catch block to catch any potential errors and then do something with them.

54
00:03:35,660 --> 00:03:38,440
Maybe something more meaningful than just logging them here.

55
00:03:38,450 --> 00:03:45,340
You could for example simply set some property in your component and then output something in your template.

56
00:03:45,380 --> 00:03:46,970
Depending on that property.

57
00:03:47,030 --> 00:03:49,830
But here I want to focus on axes and stairs.

58
00:03:49,880 --> 00:03:51,270
Simple solution.

59
00:03:51,650 --> 00:03:56,460
So now we got all the code it takes to send that request with x Yes.

60
00:03:56,720 --> 00:03:58,010
Let's see if that works.

61
00:03:58,010 --> 00:04:03,470
Make sure the fire base is configured correctly that the rules allow everyone to write and read and

62
00:04:03,470 --> 00:04:04,280
thereafter.

63
00:04:04,310 --> 00:04:10,070
Let's simply go back to our application and let's enter something here into this form.

64
00:04:10,250 --> 00:04:12,480
So for now this doesn't have to be valid.

65
00:04:12,500 --> 00:04:14,030
You can enter anything you want.

66
00:04:14,030 --> 00:04:15,710
You can also leave out fields.

67
00:04:15,770 --> 00:04:20,390
Let's enter our hobby here and click submit before doing that.

68
00:04:20,390 --> 00:04:26,010
However let me open the javascript console so that we can actually see something there.

69
00:04:26,060 --> 00:04:29,600
Let's now click submit and we see two things.

70
00:04:29,660 --> 00:04:36,860
The first object here is coming from this console lock statement but there after the second output we

71
00:04:36,860 --> 00:04:44,900
see is coming from the console lock statement in the then block here and you'll see that we got a status

72
00:04:44,900 --> 00:04:47,840
code of 200 So it was successful.

73
00:04:47,840 --> 00:04:50,050
You also see data here.

74
00:04:50,210 --> 00:04:54,540
In this case it's just a key value pair with a name and then some cryptic string.

75
00:04:54,770 --> 00:04:59,160
And that actually is the ID of the data it received on the back end.

76
00:04:59,180 --> 00:05:05,350
So in firebase if we switch to firebase you'll see a new users node was created.

77
00:05:05,380 --> 00:05:12,350
If you expand this here you see that same cryptic string that is just a unique ID created automatically

78
00:05:12,350 --> 00:05:16,880
by a firebase and there you see all the user data stored.

79
00:05:17,180 --> 00:05:23,960
So submitting the data to the back end did work correctly and that is already how we can use accedes

80
00:05:24,230 --> 00:05:31,820
just importing it and then calling Post and of course it works in the same way for our requests get

81
00:05:31,900 --> 00:05:33,520
put and so on.

82
00:05:33,530 --> 00:05:37,480
Let's actually see a get request an action in the next lecture.

