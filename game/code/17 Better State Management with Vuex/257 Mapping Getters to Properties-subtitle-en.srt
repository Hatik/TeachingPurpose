1
00:00:01,900 --> 00:00:05,320
In a class with you we implemented such a getter here.

2
00:00:05,380 --> 00:00:11,060
Now what if we actually wanted to have an average get or let's say.

3
00:00:11,080 --> 00:00:20,440
So in our gatherer's property in the store we now also have the string counter for example where we

4
00:00:20,440 --> 00:00:30,070
take our estate and we return our estate counter plus CLECs to turn it into a string which says five

5
00:00:30,070 --> 00:00:32,290
clicks to clicks and so on.

6
00:00:32,290 --> 00:00:37,440
So now we get this brand new Geter and then another result I want to use this.

7
00:00:37,450 --> 00:00:44,020
So here I will quickly wrap my paragraph into ideas because again we may only have one root element

8
00:00:44,050 --> 00:00:53,320
in a component and then we have this number of clicks text here where I want to output my let's say

9
00:00:53,350 --> 00:01:04,440
CLECs computer property which I'll create here clicks and where I then return these store getters string

10
00:01:04,460 --> 00:01:05,610
counter.

11
00:01:05,640 --> 00:01:08,190
Also don't execute a chest running like this.

12
00:01:08,290 --> 00:01:10,220
And I see I got my clicks here.

13
00:01:10,240 --> 00:01:11,390
That works.

14
00:01:11,470 --> 00:01:18,040
The problem though is that I now have two computer properties to fetch my state here or to fetch my

15
00:01:18,040 --> 00:01:24,580
getters and if I would add more and more and more getters I would have to repeat that for every Gadar

16
00:01:24,970 --> 00:01:31,600
that is possible but it would be more convenient if you X would kind of do that automatically and give

17
00:01:31,600 --> 00:01:37,150
me access to all my getters so that I could can conveniently say clicks here or something like that

18
00:01:37,180 --> 00:01:42,910
or string count or whatever and then would automatically execute the right getter without me having

19
00:01:42,910 --> 00:01:45,100
to set up a computed property for that.

20
00:01:45,310 --> 00:01:49,690
Well turns out the X has a helper method for that we can use.

21
00:01:49,960 --> 00:01:54,800
It has a method which will treat all the computer properties we need on its own for dead.

22
00:01:54,820 --> 00:02:04,800
I need to import the helper function from view X and thus help or function is called Map getters.

23
00:02:04,810 --> 00:02:11,920
Now with this function Im or did I now can override my computed properties here and say mapped getters

24
00:02:11,980 --> 00:02:17,530
execute this function of course and this takes an array as an argument and then this array we simply

25
00:02:17,650 --> 00:02:22,020
specify as strings all the getters we want to use in this component.

26
00:02:22,210 --> 00:02:27,490
So for example if I want to use both getters we have right now double counter and the string counter.

27
00:02:27,640 --> 00:02:33,240
I would say double counter and also string counter like this.

28
00:02:33,250 --> 00:02:39,840
Now this will in the background automatically create computer properties which also have the names double

29
00:02:39,850 --> 00:02:46,040
counter and string counter and map them to the getters to disfunctions to these functions here.

30
00:02:46,060 --> 00:02:54,030
In my story with data I can now change my template here to use the double counter here and to use the

31
00:02:54,040 --> 00:02:55,570
string counter here.

32
00:02:55,720 --> 00:03:00,570
And if I save this and reload we see it still works.

33
00:03:00,760 --> 00:03:04,420
But now I'm using Map getters here.

34
00:03:04,420 --> 00:03:10,720
That really is a better way or a nicer way to save a lot of code and easily get access to our ghetto's

35
00:03:10,980 --> 00:03:12,950
though it also has one downside.

36
00:03:12,950 --> 00:03:14,060
Do you see it.

37
00:03:14,380 --> 00:03:19,750
Well what if we wanted to create our own computed functions and mix them with the Garris right now map

38
00:03:19,750 --> 00:03:23,470
getters is the whole content of this computed property.

39
00:03:23,470 --> 00:03:26,880
So right now we can't add our own computed properties.

40
00:03:26,890 --> 00:03:29,040
Data is not really optimal because of it.

41
00:03:29,080 --> 00:03:33,970
I want to create my own computed property for something totally unrelated to my state maybe.

42
00:03:34,270 --> 00:03:35,970
Well then I can do it right now.

43
00:03:36,340 --> 00:03:42,580
Thankfully with ESX which we're able to use in our set up here we get an easy solution let's create

44
00:03:42,580 --> 00:03:46,240
a Chavez could object again and put map getters inside of it.

45
00:03:46,240 --> 00:03:51,790
Now this will not work because MPT getters on its own creates an object with all these computed methods

46
00:03:51,790 --> 00:03:54,600
or computed properties which are methods.

47
00:03:54,750 --> 00:04:00,820
Therefore right now what we would do here is have an object which then immediately has an object in

48
00:04:00,820 --> 00:04:10,900
itself that is not valid code with ESX we get is spread operator the three dots here the free dots basically

49
00:04:10,900 --> 00:04:14,260
allow us to tail javascript.

50
00:04:14,410 --> 00:04:19,110
Please pull out all the properties and methods in the object you have here.

51
00:04:19,120 --> 00:04:25,100
Remember map Katter's is an object holding all the methods mapped methods these computed properties.

52
00:04:25,330 --> 00:04:31,350
So pull them all out of there and true Yate separate key value pairs for each of them.

53
00:04:31,450 --> 00:04:38,440
So this will now allow us to add all the computed properties which get treated automatically into dis

54
00:04:38,920 --> 00:04:39,700
object.

55
00:04:39,730 --> 00:04:48,390
Of computer properties and we could still ride our own computer property year and have no issue at all.

56
00:04:48,390 --> 00:04:50,880
So this is a way how we can mix this.

57
00:04:50,930 --> 00:04:56,310
However if we save to go back to the application we now see it's broken at least at the point of time

58
00:04:56,310 --> 00:04:57,900
I do record this.

59
00:04:57,900 --> 00:05:04,800
The problem is we have a look a look at the console that does free Dotts year are unexpected.

60
00:05:04,910 --> 00:05:12,840
So the 6 compiler we're using here doesn't recognize that if we have a look at the package to adjacent

61
00:05:12,840 --> 00:05:20,760
file we see that we're using be able to compile our ESX 2 years 5 code and DB pre-sets we load it here

62
00:05:21,090 --> 00:05:28,770
don't cover does rest and spread operator Syntec So these free dots where we can simply add a new package

63
00:05:28,800 --> 00:05:34,620
to get this functionality to work and keep in mind it's all compiled to valid IIS 5 code in the end.

64
00:05:34,650 --> 00:05:37,830
So you're not adding something which then wouldn't run in the browser.

65
00:05:37,830 --> 00:05:40,590
It's only that we got more features during development.

66
00:05:40,920 --> 00:05:51,890
So I can install a new development only dependency which is called cable preset stage 2.

67
00:05:52,370 --> 00:05:56,010
And this will add support for the rest and spread.

68
00:05:56,010 --> 00:05:58,950
Operator Are these free dots we're using.

69
00:05:59,030 --> 00:06:05,870
So with that added We now have to go to the Bible R-S.C. file here and there we have to add a new entry

70
00:06:05,980 --> 00:06:13,450
to this array of pre-sets and this entry is simply simply called Stage to this new preset we just download

71
00:06:13,980 --> 00:06:18,410
with that if we save this and restart our development server here.

72
00:06:21,610 --> 00:06:23,860
We now see that it works again.

73
00:06:23,860 --> 00:06:25,020
If I click here.

74
00:06:25,150 --> 00:06:34,600
But now with MAP getters to have well one easy way of getting all these getters and with the free dots

75
00:06:35,290 --> 00:06:39,450
while still being able to create our own computer properties.

76
00:06:39,490 --> 00:06:41,260
So that is a huge improvement.

77
00:06:41,320 --> 00:06:48,580
Getting the data from our store fruity scatters makes sure that there we don't have to rewrite the same

78
00:06:48,580 --> 00:06:51,410
code over and over again and with mapped getters.

79
00:06:51,490 --> 00:06:54,730
It's extremely easy to get easy access to our rigorous.

