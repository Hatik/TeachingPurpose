1
00:00:02,220 --> 00:00:08,490
We already did state management and this course for example like this we wanted to access a child with

2
00:00:08,580 --> 00:00:10,830
this child's one child.

3
00:00:11,070 --> 00:00:13,440
And this direct access is not possible.

4
00:00:13,620 --> 00:00:19,080
So he could pass for example a call back from the parent from the root component to child one which

5
00:00:19,080 --> 00:00:21,910
passes to call back to its child.

6
00:00:22,050 --> 00:00:27,360
And then this child uses to call back to pass the data to the parent to the root parent should say.

7
00:00:27,540 --> 00:00:30,870
And then this route component passed the data to the child.

8
00:00:30,870 --> 00:00:33,380
We finally went to get our data.

9
00:00:33,690 --> 00:00:40,390
Well if we only have these few components that might work though it already doesn't make that much fun

10
00:00:40,590 --> 00:00:47,200
but it might work but it does become harder if we add more layers of components to our application.

11
00:00:47,280 --> 00:00:50,060
An alternative would be to use an event bus.

12
00:00:50,070 --> 00:00:56,160
That means we still can't access it directly but we use a central component a central view instance

13
00:00:56,160 --> 00:01:00,960
which we use as a bus which we use to call a mid on this bus.

14
00:01:01,140 --> 00:01:05,660
And then on the target component we listen on changes in this bus.

15
00:01:05,790 --> 00:01:06,720
It's better.

16
00:01:06,750 --> 00:01:09,510
It's shorter but it still has its issues.

17
00:01:09,510 --> 00:01:16,320
For example one bus load will quickly get pretty crowded in bigger applications with a lot of different

18
00:01:16,340 --> 00:01:17,480
limits and so on.

19
00:01:17,480 --> 00:01:23,910
So there probably is a lot of code in this instance and in the end which arguably is maybe not the best

20
00:01:23,910 --> 00:01:25,700
solution to this.

21
00:01:25,710 --> 00:01:27,770
It also gives us another problem.

22
00:01:27,780 --> 00:01:30,440
The changes we make are hard to track.

23
00:01:30,630 --> 00:01:35,370
Yes we do have a central bus but we access it from all over our application.

24
00:01:35,370 --> 00:01:42,710
Hence it's really hard for us to see in hindsight when we made which change in which place.

25
00:01:42,750 --> 00:01:47,190
So yep it's bad or it might be all you need for medium sized applications.

26
00:01:47,190 --> 00:01:49,850
There's nothing wrong it's a perfectly valid tool.

27
00:01:49,950 --> 00:01:56,220
But for large applications it might not be the best tool for large applications really really might

28
00:01:56,220 --> 00:02:02,440
want a different set up where we have a unique or a central place to restore everything.

29
00:02:02,520 --> 00:02:09,240
But then also some specific places where we define are ways to change the data to get the data so that

30
00:02:09,240 --> 00:02:15,750
we have a clear separation of concerns here and can therefore easily track when you made which change

31
00:02:15,840 --> 00:02:19,830
and so on view X. What does modulars about.

32
00:02:19,950 --> 00:02:21,550
Will offer us such a pattern.

33
00:02:21,570 --> 00:02:22,900
So let's have a look at it.

