1
00:00:01,930 --> 00:00:04,180
So that's the finished you X pattern.

2
00:00:04,180 --> 00:00:10,580
I could imagine you kind of understood how it works but don't feel 100 percent comfortable using it.

3
00:00:10,600 --> 00:00:11,390
That's normal.

4
00:00:11,410 --> 00:00:16,930
It's something you have to practice and you have to use and use it in the final course project so that

5
00:00:16,960 --> 00:00:22,390
hopefully gives some additional confidence in this pattern or in using it.

6
00:00:22,390 --> 00:00:28,450
Also be aware you don't have to use it if you have a tiny or medium sized application setting up all

7
00:00:28,450 --> 00:00:33,640
these mutations actions and getters maybe too much boilerplate maybe you don't want to use it in such

8
00:00:33,640 --> 00:00:34,690
a case.

9
00:00:34,900 --> 00:00:41,320
Anyways I want to reiterate how this all works to really make this 100 percent clear.

10
00:00:41,380 --> 00:00:46,870
We do have our central store and this story it gets adjusted or changed by our mutations.

11
00:00:46,870 --> 00:00:49,100
Mutations have to be synchronous.

12
00:00:49,180 --> 00:00:57,240
Therefore we oftentimes use actions to commit our mutations actions are dispatched by our components

13
00:00:57,760 --> 00:01:04,730
and it is a good practice to always use actions even for non asynchronous mutations or tasks.

14
00:01:04,900 --> 00:01:11,200
But you don't have to if you don't want to use async code you are fine to just commit your mutations

15
00:01:11,200 --> 00:01:15,390
directly from your components without using actions in between.

16
00:01:15,430 --> 00:01:17,220
However you do it in the end.

17
00:01:17,230 --> 00:01:23,140
Of course you not only want to change to state you also want to use it and for Debka getters getters

18
00:01:23,140 --> 00:01:30,370
allow you to access your state in different components and getters have the nice benefit of these components

19
00:01:30,730 --> 00:01:34,500
automatically getting updated when every US state changes.

20
00:01:34,660 --> 00:01:37,960
Let's see this in our application in our application.

21
00:01:37,960 --> 00:01:40,040
Everything starts here in the store.

22
00:01:40,060 --> 00:01:44,620
We set up our initial state which holds discounter which is 0 initially.

23
00:01:44,690 --> 00:01:50,140
Now this state is nice but it doesn't help us if we can't use it in our application.

24
00:01:50,230 --> 00:01:54,480
Therefore we want to see it and some components to see it.

25
00:01:54,490 --> 00:01:59,260
We set up some getters to have reusable code for accessing our state.

26
00:01:59,320 --> 00:02:05,770
We do use these getters in the result and in the above result component in another resource we use map

27
00:02:05,770 --> 00:02:06,340
getters.

28
00:02:06,370 --> 00:02:12,790
Does little helper to create a couple of computer properties automatically which we then can use to

29
00:02:12,880 --> 00:02:17,660
access our state or our properties in the state.

30
00:02:17,680 --> 00:02:18,370
End result.

31
00:02:18,370 --> 00:02:24,220
We do it directly by accessing this resigned stored Chatteris since we only use one getter here we could

32
00:02:24,220 --> 00:02:31,510
use MAPI and get a here too of course getting is nice but in order to adjust and change our state we

33
00:02:31,510 --> 00:02:32,870
use mutations.

34
00:02:33,010 --> 00:02:37,910
Mutations take the state as input and optionally all to get a payload.

35
00:02:37,960 --> 00:02:42,910
The payload is basically data we pass to mutate to state here.

36
00:02:42,910 --> 00:02:48,150
We then directly manipulate the state and therefore override the old state.

37
00:02:48,400 --> 00:02:55,660
We can commit mutations directly from our components but oftentimes we will use actions in between and

38
00:02:55,660 --> 00:02:59,270
we do have to use actions if we want to run asynchronous tasks.

39
00:02:59,500 --> 00:03:05,170
These actions are set up in such a way that the first argument is the context which is almost the same

40
00:03:05,170 --> 00:03:11,770
as the story but does have some minor differences and there we mainly need to commit method which are

41
00:03:11,770 --> 00:03:13,820
used to commit the mutations.

42
00:03:13,900 --> 00:03:20,560
We can use async code in our actions as long as the Committing is always done synchronously.

43
00:03:20,590 --> 00:03:26,560
So as long as we don't have async code in our mutations we also can of course get a payload for our

44
00:03:26,560 --> 00:03:33,230
actions and we do fire the actions in our counter and other counter methods or components excuse me

45
00:03:33,510 --> 00:03:40,640
where we set up our methods and use map actions with the spread operator here to quickly create or let

46
00:03:40,860 --> 00:03:44,920
X create the actions we need to have to access our actions.

47
00:03:45,220 --> 00:03:51,280
And that's really all this is how a view X application is set up and how we can manage to stay there

48
00:03:51,660 --> 00:03:52,960
in the next with us.

49
00:03:52,960 --> 00:04:01,120
I want to have a look at how we could split out distorted us far into multiple files for bigger applications

50
00:04:01,840 --> 00:04:08,970
because this file will get crowded pretty quickly and some additional things on how to optimize.

51
00:04:08,990 --> 00:04:11,650
As for using it with bigger applications.

