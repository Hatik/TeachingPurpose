1
00:00:01,990 --> 00:00:08,650
Actually before coming to how to use the set up or how to use view X and bigger applications and how

2
00:00:08,650 --> 00:00:11,400
we might organize it with different files.

3
00:00:11,530 --> 00:00:15,400
Let me highlight one important special case.

4
00:00:15,400 --> 00:00:17,630
Imagine the following in our story.

5
00:00:17,650 --> 00:00:25,820
We now not only got to the counter but we also got let's say the value the global avowals which 0 initially.

6
00:00:25,870 --> 00:00:29,630
Now this value shall be set in any of our components.

7
00:00:29,650 --> 00:00:35,890
So for that I will quickly set up a Gadar which all is simply name value.

8
00:00:36,040 --> 00:00:43,360
And here I get my state and I simply want to return State values like this and I want to create a mutation

9
00:00:43,360 --> 00:00:52,610
for it which will name up the value which gets the state and the payload and then a year.

10
00:00:52,670 --> 00:00:59,570
I simply want to set state value equal to payload so that any payload is just a number which should

11
00:00:59,570 --> 00:01:06,540
be the new value and I will set up an action for it is the action I want to set up is all the code called

12
00:01:06,620 --> 00:01:07,890
update value.

13
00:01:08,090 --> 00:01:12,210
And here I do get my object where I'm only interested in the commit method.

14
00:01:12,440 --> 00:01:21,320
And I do get my payload and therefore I can then call commit up the value which is the name of the mutation

15
00:01:21,320 --> 00:01:23,970
and when I execute and pass on the payload.

16
00:01:24,200 --> 00:01:28,120
So far so standard it's nothing we haven't done yet.

17
00:01:28,130 --> 00:01:34,980
Now in the Apter view file let's say here I want to add innumerous on line be all low all my counter

18
00:01:35,010 --> 00:01:43,170
stuff and I want to add input which is of type text which actually should allow me to set this value.

19
00:01:43,460 --> 00:01:46,490
So here is where it becomes tricky.

20
00:01:46,700 --> 00:01:55,700
All quickly set up my computer property for value I'll name a value like this.

21
00:01:55,920 --> 00:01:58,790
And here I simply want to return this store

22
00:02:01,990 --> 00:02:04,300
getters value.

23
00:02:04,300 --> 00:02:09,200
That's the name of the Geter I created for that.

24
00:02:09,380 --> 00:02:17,340
And if I said a value equal to value here and we see this in the application we see it works.

25
00:02:17,350 --> 00:02:21,930
We see Ciro here but what's the issue we got here.

26
00:02:22,450 --> 00:02:27,940
Well let's say we actually want to not only display the value but set it.

27
00:02:28,090 --> 00:02:35,260
So we model the value will not work because the value is a computer property not a normal property computed

28
00:02:35,290 --> 00:02:37,070
only returns as a value.

29
00:02:37,240 --> 00:02:45,370
So if we do this and updated and write 10 year our state will not be affected by this we can see this

30
00:02:45,670 --> 00:02:51,500
by simply adding a paragraph down there where output values like this.

31
00:02:51,520 --> 00:02:58,190
If I do that you'll see it doesn't change if I tape uphill type up here because the state in our store

32
00:02:58,190 --> 00:03:03,100
isn't attached because our computed value the value here is only a Gadar.

33
00:03:03,110 --> 00:03:06,380
We're not able to set it to we're binding like we want to do here.

34
00:03:06,440 --> 00:03:07,890
How can we fix this.

35
00:03:08,210 --> 00:03:10,900
Well here's one way how we could fix it.

36
00:03:10,970 --> 00:03:18,300
There's this we set up a Methot and Endace method which I'll call up the value for example.

37
00:03:18,430 --> 00:03:29,140
All I want to do is get my event here of course and then simply call this store dispatch update value

38
00:03:29,740 --> 00:03:33,670
and past event target value as an argument.

39
00:03:33,940 --> 00:03:41,740
So the value of this input field as an argument with that in place I can go up to my input and change

40
00:03:41,740 --> 00:03:48,580
this back to just value for now because we're not today binding and that added input event here and

41
00:03:48,580 --> 00:03:51,530
execute update value on it.

42
00:03:51,700 --> 00:03:57,580
So this newly created method with data if I reload this and I enter something here you see this state

43
00:03:57,580 --> 00:03:59,120
gets updated as well.

44
00:03:59,140 --> 00:04:00,520
So now it's working.

45
00:04:00,670 --> 00:04:07,150
But the problem is well it's our cast and crew were binding we set up here what if we really wanted

46
00:04:07,150 --> 00:04:10,920
to use the shorter way of using the model value.

47
00:04:10,990 --> 00:04:13,010
That would be much nicer wouldn't it.

48
00:04:13,450 --> 00:04:19,140
Well we can do it by ignoring this method instead changing our computed property.

49
00:04:19,330 --> 00:04:26,530
Something I haven't really shown until now is that you can for computer properties set up a getter and

50
00:04:26,530 --> 00:04:27,690
a sadder.

51
00:04:27,820 --> 00:04:29,960
I didn't show it because you really need that.

52
00:04:29,980 --> 00:04:32,280
Most of the time you only want to get the data.

53
00:04:32,290 --> 00:04:34,460
That's what I can do the properties therefore.

54
00:04:34,750 --> 00:04:41,290
But you can turn your computed property into an object where you don't have a get and a set path and

55
00:04:41,800 --> 00:04:47,200
the getter of course responsible for getting the value so that is what your get property would always

56
00:04:47,200 --> 00:04:48,000
be like.

57
00:04:48,250 --> 00:04:52,450
And then the satirise this new thing which you really use.

58
00:04:52,450 --> 00:05:01,950
So here in the Satir you get the value and then you can simply call this store dispatch update value

59
00:05:01,990 --> 00:05:04,640
here and pass the value.

60
00:05:05,080 --> 00:05:10,780
So again this is something I didn't show before because using a setter in a computed property is something

61
00:05:10,780 --> 00:05:14,650
you really need because you really want to set something there computer.

62
00:05:14,650 --> 00:05:19,290
In the end means it's it depends on something else and gets recalculated.

63
00:05:19,390 --> 00:05:25,580
And this is a very rare exception where we want to do something whenever we try to set the value.

64
00:05:25,690 --> 00:05:30,520
So if we do that and reload this you now it still works.

65
00:05:30,580 --> 00:05:37,870
Now by using the model up here and our computed property which now actually is an object with a getter

66
00:05:38,020 --> 00:05:41,310
and a set are again use with caution.

67
00:05:41,310 --> 00:05:45,260
This is one of the very real places where you want to use a Gadarene a center.

68
00:05:45,280 --> 00:05:51,760
But here it's perfectly fine because this now allows us to use the model with our property which is

69
00:05:51,790 --> 00:05:54,440
bound to the state of our application.

