1
00:00:02,060 --> 00:00:08,120
We are to send a POST request last but you we also saw that you do get back a response which has a lot

2
00:00:08,120 --> 00:00:13,910
of data in it and we'll have a look at using this response in this video when we also have a look at

3
00:00:13,910 --> 00:00:19,970
sending a request so that we're not only able to store our data on a server but also that we're able

4
00:00:19,970 --> 00:00:25,850
to get it back and use it in our application and for using it will also have a look at how we can extract

5
00:00:25,850 --> 00:00:28,320
data from the response we're getting back.

6
00:00:28,670 --> 00:00:34,970
Well let's start by adjusting your app to actually be able to fetch data and use that.

7
00:00:35,000 --> 00:00:40,000
I'll add new button button primary here where I will say Get data.

8
00:00:40,000 --> 00:00:45,720
This should simply trigger this that I fetch the data and I will therefore add a click listener where

9
00:00:45,740 --> 00:00:49,430
I say fetch data that will be the method which should get executed.

10
00:00:49,430 --> 00:00:51,640
Of course I still need to create this method.

11
00:00:51,950 --> 00:00:57,550
So here is the Get Data button and below does get data button here.

12
00:00:57,680 --> 00:01:01,150
I want to have an ordered list and it is on the list.

13
00:01:01,160 --> 00:01:03,350
I'll also give it a class of list group.

14
00:01:03,650 --> 00:01:09,530
I want to output some list items with the list item bootstrap class where it basically output my user

15
00:01:09,530 --> 00:01:10,240
data.

16
00:01:10,430 --> 00:01:16,930
Now we can do this with the four of you learnt that and your dad would need a user array.

17
00:01:17,210 --> 00:01:23,870
So quickly create this new era a year users is an empty array initially and there I simply want loop

18
00:01:23,870 --> 00:01:24,260
fruit.

19
00:01:24,290 --> 00:01:31,880
And since I already have user as a name here in my data I'll use just you here in users users of course

20
00:01:31,880 --> 00:01:33,110
refers to desir.

21
00:01:33,340 --> 00:01:41,400
And then here I want to output you dord username and then separate with Dasch maybe you do not e-mail.

22
00:01:41,640 --> 00:01:43,610
So that is how I output my user data.

23
00:01:43,650 --> 00:01:48,090
Of course we don't see anything here because it is anti.

24
00:01:48,260 --> 00:01:51,410
And yet you flagellate them if it is not defined yet.

25
00:01:51,410 --> 00:01:54,860
Thank you I will do so in a second so this is how we output it.

26
00:01:54,930 --> 00:02:02,930
Now I will add the fetch data method and in there I now want to fetch the data from firebase and then

27
00:02:02,930 --> 00:02:10,100
somehow store it in there in this array and hopefully the list will then somehow well be updated in

28
00:02:10,160 --> 00:02:12,420
the dorm here in my age HTML code.

29
00:02:12,650 --> 00:02:16,670
Let's start step by step and see how we can send the request.

30
00:02:16,720 --> 00:02:19,970
We of course we still use this dollar sign HTP.

31
00:02:20,000 --> 00:02:28,460
Now if they get Methot And then this get Mefford we pass the same you're all asked before I don't need

32
00:02:28,460 --> 00:02:31,060
to pass an extra argument here.

33
00:02:31,520 --> 00:02:37,060
But what I do need to do of course is I want to handle my response with the then function here.

34
00:02:37,100 --> 00:02:41,680
Now in this function I do get my response in that.

35
00:02:42,320 --> 00:02:48,450
And the cool thing is the resource now gives us some helper methods on responses.

36
00:02:48,620 --> 00:02:55,380
This response not only has the body and so on it also has some methods we can use.

37
00:02:55,700 --> 00:02:58,500
And one very useful method is.

38
00:02:58,880 --> 00:03:07,070
Jason Meffert here Jason basically extracts all your response and converts it into a challenge and object

39
00:03:07,070 --> 00:03:08,340
which you may use.

40
00:03:08,360 --> 00:03:13,160
This is very handy of course because otherwise we get back a body which is a string partly finished

41
00:03:13,210 --> 00:03:14,710
it can only be a string.

42
00:03:15,050 --> 00:03:21,050
And we would have to manually parse this into a script object while the chastened function just as for

43
00:03:21,050 --> 00:03:22,130
us.

44
00:03:22,130 --> 00:03:30,050
Now this of course means we should now store it would store it in a constant data and have a look at

45
00:03:30,050 --> 00:03:32,080
how this data looks like then.

46
00:03:32,210 --> 00:03:39,030
So if I present data here let's see if this works the way we want to work for now head over.

47
00:03:39,140 --> 00:03:49,660
And I did get data Oh I somehow get a promise here and not really the extracted data.

48
00:03:49,660 --> 00:03:51,450
Why is that.

49
00:03:51,520 --> 00:03:59,980
The reason is response Jason also gives us back a promise and not the extract the data right away because

50
00:03:59,980 --> 00:04:03,190
it's asynchronous task doesn't have that data right away.

51
00:04:03,520 --> 00:04:05,660
So order to really access it.

52
00:04:05,790 --> 00:04:12,680
I can't do it like this instead of others should do is not in a constant but return response Jason.

53
00:04:12,790 --> 00:04:19,010
And then simply change their method here to now use this extract the data in here.

54
00:04:19,150 --> 00:04:23,220
So we may name is data they're for.

55
00:04:23,430 --> 00:04:25,200
And now let's log it here.

56
00:04:25,200 --> 00:04:30,930
Data will be extracted because this asynchronous task of extracting it with the chase method and getting

57
00:04:30,930 --> 00:04:32,670
the response and everything.

58
00:04:32,700 --> 00:04:34,440
All these things have now been finished.

59
00:04:34,440 --> 00:04:36,660
So now we do have access to the data.

60
00:04:36,840 --> 00:04:39,930
So if I now get data again.

61
00:04:39,930 --> 00:04:46,680
Now we see an object where we actually do have our strange ideas and inside of these IDs we do have

62
00:04:46,770 --> 00:04:49,290
our user data.

63
00:04:49,290 --> 00:04:50,340
Now that's nice.

64
00:04:50,340 --> 00:04:57,120
And actually that's everything I need to be able to loop through it because this is now each a user.

65
00:04:57,150 --> 00:04:59,550
And that's exactly what I wanted to print here.

66
00:04:59,880 --> 00:05:08,400
So in order to do so I now should somehow use my extract the data here and assign it to my users array.

67
00:05:08,400 --> 00:05:10,880
Now the thing we're getting back is no array though.

68
00:05:10,880 --> 00:05:14,170
It's an object where we do have key value pairs right.

69
00:05:14,310 --> 00:05:20,180
With these cryptic keys and then the values are objects or being or objects.

70
00:05:20,280 --> 00:05:24,920
Now we can easily transform this into an array though and there are different ways of doing so.

71
00:05:24,930 --> 00:05:29,900
I will show you one so my result array shall be an empty array initially let's say.

72
00:05:30,120 --> 00:05:34,350
Then I loop for all of four for all my key is in data data.

73
00:05:34,380 --> 00:05:37,580
Again it's an object where the keys are these cryptic strings.

74
00:05:37,860 --> 00:05:46,220
And then I can simply say result aere push data and then access the key of the current iteration.

75
00:05:46,240 --> 00:05:48,170
So to get the value of that key.

76
00:05:48,460 --> 00:05:57,340
And then finally all I need to do is I need to set this users so that users aere up here equal to resolve

77
00:05:57,400 --> 00:05:58,870
array.

78
00:05:58,910 --> 00:06:02,610
That's one way of course there would be other ways but this should work.

79
00:06:02,830 --> 00:06:04,330
And now let's see this in action.

80
00:06:04,330 --> 00:06:07,570
I will reload does it get data.

81
00:06:07,840 --> 00:06:13,810
And you see it took a couple of milliseconds but then the data was there and you Chasez clever enough

82
00:06:13,810 --> 00:06:20,120
to update it Dom because it recognizes that we set a new value to this users and that is a trigger for

83
00:06:20,120 --> 00:06:22,160
the chairs to update the dawn.

84
00:06:22,510 --> 00:06:25,420
And therefore this does not work as intended.

85
00:06:25,570 --> 00:06:31,720
Just add some line breaks below the button to make it look a bit nicer but now we see fetching data

86
00:06:31,900 --> 00:06:38,050
works fine and does how we can send a get request and also very important how we can use the data we

87
00:06:38,050 --> 00:06:43,780
get back extract the response to Chaisson which also returns is a promise and then used this promise

88
00:06:43,780 --> 00:06:44,720
down here.

89
00:06:44,720 --> 00:06:49,990
Q Well use it how we need to use it to transform the data in the way we need to transform it or whatever

90
00:06:49,990 --> 00:06:51,690
your plan is with the data.

91
00:06:51,700 --> 00:06:52,470
You go back.

