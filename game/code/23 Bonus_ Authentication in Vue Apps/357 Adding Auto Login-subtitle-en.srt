1
00:00:03,050 --> 00:00:05,690
It The Last Lecture we all log out.

2
00:00:05,690 --> 00:00:15,200
Now I want to make sure that if I do log in here and then I reload the page I still am logged in because

3
00:00:15,200 --> 00:00:18,480
the token here is still would be valid.

4
00:00:18,680 --> 00:00:24,620
Now to do this I first of all need to store the token somewhere else than in the Buick's store because

5
00:00:24,620 --> 00:00:31,490
the Buick's store of course is javascript and therefore is lost just as all the data in javascript fonts

6
00:00:31,520 --> 00:00:33,380
is on page reloads.

7
00:00:33,380 --> 00:00:35,290
We can use a browser API.

8
00:00:35,480 --> 00:00:40,820
We can use local storage local storage can be accessed from within the browser.

9
00:00:40,820 --> 00:00:47,590
It's not a new feature which allows us to store a key value pairs in a persistent browser storage.

10
00:00:47,780 --> 00:00:58,580
So on local storage I can call said item and I can give it any key I want like Token and there I can

11
00:00:58,580 --> 00:01:02,700
now store rest data ID token.

12
00:01:02,870 --> 00:01:07,090
The same could be done for word user id more relevant.

13
00:01:07,120 --> 00:01:10,880
The idea however is the time when this token expires.

14
00:01:11,090 --> 00:01:21,020
Of course the not so optimal solution is to set item expires in and store wrests data expires in a while

15
00:01:21,020 --> 00:01:22,640
it is not so optimal.

16
00:01:23,060 --> 00:01:30,600
Well because here does of course is a value in seconds 3000 seconds for example.

17
00:01:30,800 --> 00:01:34,610
Well thats also going to be 3000 seconds whenever we retrieve it.

18
00:01:34,880 --> 00:01:40,670
So we should store that date when the token becomes invalid not the amount of seconds.

19
00:01:41,030 --> 00:01:47,350
So lets calculate the state for this or add a new constant in my Sign-Up action your own name it now.

20
00:01:47,620 --> 00:01:52,580
And I can use new date without arguments in the constructor to get the current date.

21
00:01:52,580 --> 00:02:01,940
Now I'll create a second constant expiration date and that is now plus rest data expires in.

22
00:02:01,950 --> 00:02:09,890
However dates are measured in milliseconds so on the now date I can call get timed this method a built

23
00:02:09,920 --> 00:02:13,850
in javascript method to convert this into milliseconds.

24
00:02:14,030 --> 00:02:19,600
So from the starting point of time basically to today in milliseconds.

25
00:02:20,090 --> 00:02:26,790
And I also need to convert dismally seconds which I can do by multiplying it with 1000.

26
00:02:26,800 --> 00:02:30,270
Now I got one big number here in milliseconds.

27
00:02:30,430 --> 00:02:36,970
I need to convert this back into a date which I do with new date and if I do pass an argument to it

28
00:02:37,210 --> 00:02:43,710
in this case this big Mallie second number this gets converted to a date based on that argument.

29
00:02:43,720 --> 00:02:51,000
So now I can store the expiration date here in the local storage and it can copy all the logic here

30
00:02:51,540 --> 00:02:54,690
and execute the same code in log in.

31
00:02:54,720 --> 00:02:58,340
So there where I also dispatch of user and so on.

32
00:02:58,500 --> 00:03:03,660
I can also store my token here now with that let me save all of that.

33
00:03:03,660 --> 00:03:05,320
Lets see if it works.

34
00:03:05,460 --> 00:03:07,470
I will log in here.

35
00:03:08,200 --> 00:03:15,550
And then we can access application under the chrome developer tools and there we get this local storage

36
00:03:15,730 --> 00:03:16,470
item.

37
00:03:16,780 --> 00:03:24,130
If we expand this we should see our u r l the local U R L if you click on this we see the items we got

38
00:03:24,190 --> 00:03:26,660
in the local storage.

39
00:03:26,800 --> 00:03:32,270
You may ignore the log level which is coming from our development set up but the token is interesting.

40
00:03:32,290 --> 00:03:34,900
This is our ID token and expires.

41
00:03:34,900 --> 00:03:36,050
It is interesting.

42
00:03:36,130 --> 00:03:41,730
Let's see if this is correct yet if I check my watch dessous to correct expiration date.

43
00:03:41,800 --> 00:03:43,550
It's one hour from now.

44
00:03:43,960 --> 00:03:49,180
So with that we're starting to stay in local storage a huge first step.

45
00:03:49,180 --> 00:03:56,260
Now of course we also need to extract that at some point of time to automatically lock to use it in.

46
00:03:56,260 --> 00:04:01,960
Now does point of time probably is at application start up.

47
00:04:02,160 --> 00:04:07,960
So maybe in the aptest view follow our route component here.

48
00:04:08,160 --> 00:04:15,690
We could add a created method using this created lifecycle hook to automatically check if the user is

49
00:04:15,690 --> 00:04:16,640
logged in.

50
00:04:16,680 --> 00:04:23,440
When this app starts for this I'll add a new action in my store and all name it.

51
00:04:23,450 --> 00:04:29,890
Or maybe place it to load in normal log in all name it try auto log in.

52
00:04:29,970 --> 00:04:32,880
You can of course choose any name you want.

53
00:04:32,880 --> 00:04:35,250
Now try auto log in.

54
00:04:35,460 --> 00:04:37,500
I want to guess what.

55
00:04:37,500 --> 00:04:45,830
See if I have a valid token in local storage so first of all all extract the token all get token from

56
00:04:45,830 --> 00:04:47,130
local storage.

57
00:04:47,270 --> 00:04:52,520
Why I did get item method there I will retrieve the token.

58
00:04:52,620 --> 00:04:59,870
Now if we have no token here so token is null or false I will just return.

59
00:04:59,870 --> 00:05:04,220
There is no value in continuing because we get no token we can't log in.

60
00:05:04,310 --> 00:05:07,280
No matter if the token would have been valid or not.

61
00:05:07,280 --> 00:05:15,590
That's the first check the second check now is to see if we got a token if it's still valid.

62
00:05:15,830 --> 00:05:19,850
So now I get the expiration date.

63
00:05:19,850 --> 00:05:28,930
I do this by accessing a local storage get item and then access expire as well.

64
00:05:28,940 --> 00:05:35,480
I should also rename this to X or expiration date in both sign and sign up.

65
00:05:35,510 --> 00:05:36,620
Makes more sense.

66
00:05:36,620 --> 00:05:43,240
So expiration date is the key name I should know also extract this year and get my expiration date here

67
00:05:43,280 --> 00:05:47,990
stored in this constant and wanted check if that's still valid.

68
00:05:47,990 --> 00:05:57,320
So again get now with new date and I will actually check if that is greater than my expiration date.

69
00:05:57,440 --> 00:06:08,370
I can check if now is smaller or equal which then essentially also means it's not valid anymore because

70
00:06:08,370 --> 00:06:10,930
in one additional millisecond it would be invalid.

71
00:06:11,100 --> 00:06:19,540
So if it's smaller or equal to an expiration date then we know it's an invalid token it expired.

72
00:06:19,770 --> 00:06:25,120
So then I will also return if we make it through the check.

73
00:06:25,120 --> 00:06:32,060
However we know that we do have a valid token because the expiration date is in the future.

74
00:06:33,060 --> 00:06:38,490
Excuse me there we're here we should check if now is great or greater or equal of course so greater

75
00:06:38,490 --> 00:06:44,520
or equal means now is in the now is after the expiration date so it's invalid if the expiration date

76
00:06:44,520 --> 00:06:45,730
is in the future though.

77
00:06:45,750 --> 00:06:50,770
So if the expiration date is greater than that now then we know we have a valid token.

78
00:06:50,880 --> 00:06:54,290
So then I want to log in for that.

79
00:06:54,300 --> 00:07:03,290
I will simply commit I want to commit my off use or mutation that requires user data which contains

80
00:07:03,360 --> 00:07:04,810
user ID too.

81
00:07:04,860 --> 00:07:12,480
So we'll also need to store data in local storage so quickly do that in the sign up method or also store

82
00:07:12,720 --> 00:07:18,120
user ID and local storage by extracting local ID from the response data.

83
00:07:18,570 --> 00:07:25,530
And I will do the same and log in all the store the user id here with that I need to extract the user

84
00:07:25,530 --> 00:07:37,520
id in my try to log an action user ID is extracted from local storage with get item user ID and then

85
00:07:37,910 --> 00:07:45,260
I can commit this mutation from up here of user where I passed the token its user ID.

86
00:07:45,440 --> 00:07:52,490
So there I will commit all of user and pass on a javascript object which should have a token because

87
00:07:52,490 --> 00:07:55,290
I retrieve a token here and the user ID.

88
00:07:55,640 --> 00:08:01,290
So it should have a token which is equal to my token constant here.

89
00:08:02,060 --> 00:08:07,710
And what should have this user ID field which is equal to my user ID constant here.

90
00:08:08,000 --> 00:08:11,260
So now we have some auto log in functionality.

91
00:08:11,300 --> 00:08:12,930
Lets see if that works.

92
00:08:13,040 --> 00:08:16,780
We actually do have a valid token stored.

93
00:08:17,000 --> 00:08:19,300
But I will for now clear the storage here.

94
00:08:19,340 --> 00:08:22,800
The developer tools to get rid of it so that its empty.

95
00:08:22,820 --> 00:08:26,900
Try this from scratch because we didn't store to use Bridey earlier.

96
00:08:26,900 --> 00:08:28,400
So now let me log in.

97
00:08:28,640 --> 00:08:29,830
We got the data.

98
00:08:30,080 --> 00:08:32,540
And now let me reload the page.

99
00:08:32,540 --> 00:08:40,060
Obviously we're not locked in because we got our Try auto log in action but we're never executing it.

100
00:08:40,370 --> 00:08:44,560
So let's now go to the laptop view fall in striated which we already prepared.

101
00:08:44,840 --> 00:08:51,840
And there I want to execute this store dispatch and dispatch this new try auto log and action.

102
00:08:52,010 --> 00:08:56,610
With dad we got valid data here stored in our local host.

103
00:08:56,780 --> 00:09:02,620
So let me simply reload this page and you see if we got the log out and dashboard button.

104
00:09:02,660 --> 00:09:05,120
So we got valid data.

105
00:09:05,120 --> 00:09:08,590
We got our successful auto log in now.

106
00:09:08,630 --> 00:09:15,530
One problem we'll have though is if we log out we don't clear our local storage.

107
00:09:15,530 --> 00:09:20,560
So that's the last thing I want to do here in store JSM the log out action.

108
00:09:20,600 --> 00:09:28,100
I also want to reach out to local storage and now we can call remove vitam for all these items or clear

109
00:09:28,190 --> 00:09:30,380
if we want to clear the entire storage.

110
00:09:30,380 --> 00:09:32,130
Now it would be OK here.

111
00:09:32,390 --> 00:09:37,320
Let's assume we have different items stored in storage and we don't want to get rid of all of them.

112
00:09:37,550 --> 00:09:47,900
So I would call and remove item and get rid of the expiration date as well as get rid of the token and

113
00:09:47,960 --> 00:09:55,230
do user id so all the fields we store here let's get rid of all of them to make sure expiration date

114
00:09:55,230 --> 00:09:56,940
is spelled correctly.

115
00:09:56,940 --> 00:10:03,630
Now if we go back to the application if I click log out you see the local store is cleared here on the

116
00:10:03,630 --> 00:10:04,470
right.

117
00:10:04,860 --> 00:10:08,070
And with that we got a working auto log and functionality.

118
00:10:08,080 --> 00:10:14,180
Now if a reload were not locked in because we got no valid log in data the log in here however and then

119
00:10:14,200 --> 00:10:15,750
reload we got data.

120
00:10:15,750 --> 00:10:17,330
It works for log out.

121
00:10:17,460 --> 00:10:18,570
It's gone.

122
00:10:18,570 --> 00:10:22,820
And the same works for signing up to there.

123
00:10:22,830 --> 00:10:29,040
If I do sign up we also store the data here which also persists across refreshes.

124
00:10:29,340 --> 00:10:34,470
So that is auto log out and auto log in here implemented.

